Thymeleaf 语法：
    + 静态资源 : @{...}
    + 变量 : ${...}
    + 选择变量 : *{...}
    + 链接 : @{...}
    + 消息 : #{...}
    + 分段 : ~{...}

1.首页配置：
    + 所有的页面静态资源都需要使用 Thymeleaf 接管
    + 使用符号 @{...} 取值

2.页面国际化：页面切换语言
    + 首先需要配置 i18n 文件
    + 如果要使用按钮进行切换，我们需要自定义一个组件 LocaleResolver
    + 将自己写的组件配置到 Spring 容器中 (@Bean)
    + 使用符号 #{...} 取值

3.用户登录功能
    + 提交表单时，action 的提交地址，应该交给 controller 控制
    + 想要获取提交表单中的属性，表单中元素必须有 name 属性
    + 控制器中接受表单的值时，最好将值使用 @RequestParam 进行注解
    + 登录成功之后，一般会重定向页面到 main.html

4.登录拦截
    + 自定义登录拦截器，需要实现 HandlerInterceptor 接口，拦截路劲设置为 /**
    + 从 session 中获取用户信息，若信息正确则放行，否则进行拦截
    + 静态资源、首页、根目录等页面需要放行，不用拦截
    + 在自定义的 MVC 扩展中重写 addInterceptors 方法用来实现自定义拦截器
    + 在自定义视图控制器中，需要将 main.html 映射到 后台主页面

5.展示员工列表
    + 将公共的部分，比如侧边栏、导航栏、页脚信息等等抽取出来成为一个单独的文件
      使用 th:fragment 和 th:insert 配合显示，括号传参
    + 使用三元表达式控制标签是否被激活 ${active=='xxx'?'link active':'link'}
    + 资源展示：th:each 循环遍历

6.添加员工
    + 点击添加按钮
    + 跳转到添加员工页面
    + 添加成后再次返回员工列表页面
    + SpringBoot 中时间默认格式为 yyyy/MM/dd，要使用别的格式，需要去 yaml 中配置

7.修改员工信息
    + Thymeleaf 中实现 restful 风格传参:
        + 单个参数 : @{/updateEmp/{id}(id=${emp.getId()})}
        + 多个参数 : @{'/delete/'+${a.getId()}+'/'+${c.Id()}}
        + 修改页面需要根据 id 显示信息，所以需要将 id 设置为隐藏域 <input type="hidden" name="id" th:value="${emp.getId()}">

8.删除员工信息、404页面
    + 在 SpringBoot 中处理 404 页面，只需要在 templates 下建立一个 error 文件夹，然后将 404.html、500.html...放进去即可

9.注销功能
    + 移除 session 即可